---
stages:
  - 'validation'

variables:
  BUNDLER_VERSION:   '1.17.1'

  # Force dependencies into a path the gitlab-runner user can write to.
  # (This avoids some failures on Runners with misconfigured ruby environments.)
  GEM_HOME:          .vendor/gem_install
  BUNDLE_CACHE_PATH: .vendor/bundle
  BUNDLE_PATH:       .vendor/bundle
  BUNDLE_BIN:        .vendor/gem_install/bin
  BUNDLE_NO_PRUNE:   'true'

  SIMP_SKIP_NON_SIMPOS_TESTS: 1

# bundler dependencies and caching
# --------------------------------------
.setup_bundler_env: &setup_bundler_env
  before_script:
    - 'ruby -e "puts %(\n\n), %q(=)*80, %(\nSIMP-relevant Environment Variables:\n\n#{e=ENV.keys.grep(/^PUPPET|^SIMP|^BEAKER|MATRIX/); pad=e.map{|x| x.size}.max+1; e.map{|v| %(    * #{%(#{v}:).ljust(pad)} #{39.chr + ENV[v] + 39.chr}\n)}.join}\n),  %q(=)*80, %(\n\n)"'
    # Diagnostic ruby & gem information
    - 'which ruby && ruby --version || :'
    - "[[ $- == *i* ]] && echo 'Interactive shell session' || echo 'Non-interactive shell session'"
    - "shopt -q login_shell && echo 'Login shell' || echo 'Not a login shell'"
    - 'rvm ls || :'

    # If RVM is available, make SURE it's using the right Ruby:
    #   * Source rvm (to run in non-login shells)
    - "command -v rvm && { if declare -p rvm_path &> /dev/null; then source \"${rvm_path}/scripts/rvm\"; else source \"$HOME/.rvm/scripts/rvm\" || source /etc/profile.d/rvm.sh; fi; }"
    - 'ruby --version || :'
    - 'gem list sync || :'

    # Bundle gems (preferring cached > local > downloaded resources)
    #   * Try to use cached and local resources before downloading dependencies
    - 'declare GEM_BUNDLER_VER=(-v "~> ${BUNDLER_VERSION:-1.17.1}")'
    - 'declare GEM_INSTALL_CMD=(gem install --no-document)'
    - 'declare BUNDLER_INSTALL_CMD=(bundle install --no-binstubs --jobs $(nproc) "${FLAGS[@]}")'
    - 'mkdir -p ${GEM_HOME} ${BUNDLER_BIN}'
    - 'gem list -ie "${GEM_BUNDLER_VER[@]}" --silent bundler || "${GEM_INSTALL_CMD[@]}" --local "${GEM_BUNDLER_VER[@]}" bundler || "${GEM_INSTALL_CMD[@]}" "${GEM_BUNDLER_VER[@]}" bundler'
    - 'rm -rf pkg/ || :'
    - 'bundle check || rm -f Gemfile.lock && ("${BUNDLER_INSTALL_CMD[@]}" --local || "${BUNDLER_INSTALL_CMD[@]}" || bundle pristine ||  "${BUNDLER_INSTALL_CMD[@]}") || { echo "PIPELINE: Bundler could not install everything (see log output above)" && exit 99 ; }'

    # Diagnostic bundler, ruby, and gem checks:
    - 'bundle exec rvm ls || :'
    - 'bundle exec which ruby || :'
    - 'bundle show sync || :'
    - 'bundle exec gem list sync || :'


.pup_6_x: &pup_6_x
  image: 'ruby:2.6'
  variables:
    PUPPET_VERSION: '~> 6.0'
    BEAKER_PUPPET_COLLECTION: 'puppet6'
    MATRIX_RUBY_VERSION: '2.6'

.pup_7_x: &pup_7_x
  image: 'ruby:2.7'
  variables:
    PUPPET_VERSION: '~> 7.0'
    BEAKER_PUPPET_COLLECTION: 'puppet7'
    MATRIX_RUBY_VERSION: '2.7'

.spec_test: &spec_test
  stage: 'validation'
  tags: ['docker']
  <<: *setup_bundler_env
  script:
    - 'bundle exec rake spec'

.syntax_test: &syntax_test
  stage: 'validation'
  tags: ['docker']
  <<: *setup_bundler_env
  script:
    - 'bundle exec rake syntax:facts'

# Pipeline / testing matrix
#=======================================================================

pup6x_spec_test:
  <<: *pup_6_x
  <<: *spec_test

pup6x_syntax_test:
  <<: *pup_6_x
  <<: *syntax_test

pup7x_spec_test:
  <<: *pup_7_x
  <<: *spec_test

pup7x_syntax_test:
  <<: *pup_7_x
  <<: *syntax_test
